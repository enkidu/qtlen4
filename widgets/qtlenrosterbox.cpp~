#include "roster_box.hpp"
QTlenRosterBox::QTlenRosterBox(QWidget * parent):QTreeWidget(parent)
{
	setRootIsDecorated(0);
	setHeaderHidden(1);
	settings = new QSettings(QDir::homePath() + "/.qtlen4/config", QSettings::IniFormat);
	offlinesVisible = settings->value("/roster/offlines_visible", false).toBool();
};

void QTlenRosterBox::contextMenuEvent(QContextMenuEvent *event)
{
	QMenu *menu = new QMenu(this);
	if (itemAt(event->pos()) and itemAt(event->pos())->childCount() == 0)
	{
		QIcon icon1;
		QIcon icon2;
		QIcon icon3;
		QIcon icon4;
		QIcon icon5;
		icon1.addPixmap(QPixmap(QString::fromUtf8(":/icons/icons/help-about.png")), QIcon::Normal, QIcon::Off);
		icon2.addPixmap(QPixmap(QString::fromUtf8(":/icons/icons/meeting-attending.png")), QIcon::Normal, QIcon::Off);
		icon3.addPixmap(QPixmap(QString::fromUtf8(":/icons/icons/view-history.png")), QIcon::Normal, QIcon::Off);
		icon4.addPixmap(QPixmap(QString::fromUtf8(":/icons/icons/user-properties.png")), QIcon::Normal, QIcon::Off);
		icon5.addPixmap(QPixmap(QString::fromUtf8(":/icons/icons/list-remove-user.png")), QIcon::Normal, QIcon::Off);
		QAction *actionInfo	= new QAction(icon1, QString::fromUtf8("Informacje"), menu);
		QAction *actionMessage	= new QAction(icon2, QString::fromUtf8("Wiadomość"), menu);
		QAction *actionHistory	= new QAction(icon3, QString::fromUtf8("Historia"), menu);
		QAction *actionEdit	= new QAction(icon4, QString::fromUtf8("Edytuj"), menu);
		QAction *actionDelete	= new QAction(icon5, QString::fromUtf8("Usuń"), menu);
		menu -> addAction(actionInfo);
		menu -> addSeparator();
		menu -> addAction(actionMessage);
		menu -> addAction(actionHistory);
		menu -> addSeparator();
		menu -> addAction(actionEdit);
		connect(actionInfo,	SIGNAL(triggered()),	this->parentWidget()->parentWidget(),	SLOT(menuActionInfo()));
		connect(actionMessage,	SIGNAL(triggered()),	this->parentWidget()->parentWidget(),	SLOT(menuActionChat()));
		connect(actionHistory,	SIGNAL(triggered()),	this->parentWidget()->parentWidget(),	SLOT(menuActionHistory()));
		connect(actionEdit,	SIGNAL(triggered()),	this->parentWidget()->parentWidget(),	SLOT(menuActionEdit()));
		connect(actionDelete,	SIGNAL(triggered()),	this->parentWidget()->parentWidget(),	SLOT(menuActionDelete()));
		menu -> addAction(actionDelete);
		menu -> addSeparator();
	}
	QAction *actionAdd 		= new QAction(QString::fromUtf8("Dodaj"), menu);
	QAction *actionShowOfflines	= new QAction(QString::fromUtf8("Pokazuj nieobecnych"), menu);
	actionShowOfflines->setCheckable(true);
	actionShowOfflines->setChecked(offlinesVisible);
	menu -> addAction(actionAdd);
	menu -> addAction(actionShowOfflines);
	connect(actionAdd,		SIGNAL(triggered()),	this->parentWidget()->parentWidget(),	SLOT(menuActionAdd()));
	connect(actionShowOfflines,	SIGNAL(toggled(bool)),	this->parentWidget()->parentWidget(),	SLOT(menuActionShowOfflines(bool)));
	connect(actionShowOfflines,	SIGNAL(toggled(bool)),	this,					SLOT(setOfflinesVisible(bool)));
	menu -> exec(event->globalPos());
};

void QTlenRosterBox::setOfflinesVisible(bool yesno)
{
	offlinesVisible = yesno;
};

QTreeWidgetItem* QTlenRosterBox::addRosterItem(QString name, QTlenPresence type, QString desc, QString jid, QTreeWidgetItem* node)
{
	QTreeWidgetItem* item = new QTreeWidgetItem(node);
	QWidget*	widget	= new QWidget(this);
	QFormLayout*	formLayout = new QFormLayout(widget);
	QLabel*		ql_name	= new QLabel(name, this);
	QLabel*		ql_statusIcon	= new QLabel(this);
	switch (type)
	{
		case Online:
			ql_statusIcon->setPixmap(QPixmap(QString::fromUtf8(":/icons/icons/16x16/online.png")));
		break;
		case Chatty:
			ql_statusIcon->setPixmap(QPixmap(QString::fromUtf8(":/icons/icons/16x16/chatty.png")));
		break;
		case Away:
			ql_statusIcon->setPixmap(QPixmap(QString::fromUtf8(":/icons/icons/16x16/away.png")));
		break;
		case XA:
			ql_statusIcon->setPixmap(QPixmap(QString::fromUtf8(":/icons/icons/16x16/xa.png")));
		break;
		case DND:
			ql_statusIcon->setPixmap(QPixmap(QString::fromUtf8(":/icons/icons/16x16/dnd.png")));
		break;
		case Offline:
			ql_statusIcon->setPixmap(QPixmap(QString::fromUtf8(":/icons/icons/16x16/offline.png")));
		break;
	}
	QFont font_name;
	font_name.setBold(true);
	font_name.setWeight(75);
	ql_name		->	setFont(font_name);
	formLayout	->	setWidget(0, QFormLayout::LabelRole, ql_statusIcon);
	formLayout	->	setWidget(0, QFormLayout::FieldRole, ql_name);
	formLayout	->	setMargin(2);
	formLayout	->	setHorizontalSpacing(2);
	formLayout	->	setVerticalSpacing(0);
	if(settings->value("/roster/show_ext_info", false).toBool())
	{
		if(settings->value("/roster/show_jid", false).toBool())
		{
			QLabel*		ql_jid	= new QLabel(jid, this);
			formLayout	->	setWidget(1, QFormLayout::FieldRole, ql_jid);
		}
		if(!desc.isEmpty())
		{
			QLabel*		ql_descIcon = new QLabel(this);
			QLabel*		ql_desc	= new QLabel(desc, this);
			ql_descIcon->setPixmap(QPixmap(QString::fromUtf8(":/icons/icons/draw-freehand.png")));
			ql_descIcon->setAlignment(Qt::AlignTop);
			QFont font;
			font.setPointSize(7);
			font.setItalic(true);
			ql_desc		->	setFont(font);
			ql_desc		->	setWordWrap(true);
			formLayout	->	setWidget(2, QFormLayout::LabelRole, ql_descIcon);
			formLayout	->	setWidget(2, QFormLayout::FieldRole, ql_desc);
		}
		
	}
	setItemWidget(item, 0, widget);
	widget->show();
	return item;
};

QTreeWidgetItem* QTlenRosterBox::addRosterNode(QString group)
{
	QTreeWidgetItem* node = new QTreeWidgetItem(this);
	QLabel *label = new QLabel(group, this);
	QFont font;
	font.setPointSize(7);
	label->setFont(font);
	label->setFrameShape(QFrame::StyledPanel);
	label->setFrameShadow(QFrame::Raised);
	label->setAlignment(Qt::AlignCenter);
	setItemWidget(node, 0, label);
	setItemExpanded(node, true);
	return node;
};